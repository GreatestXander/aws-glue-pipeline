import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

##Additional Lib
from awsglue.dynamicframe import DynamicFrame
##


## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "default", table_name = "donuts_xml", transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "default", table_name = "donuts_xml", transformation_ctx = "datasource0")
## @type: ApplyMapping
## @args: [mapping = [("_id", "int", "_id", "int"), ("_type", "string", "_type", "string"), ("batters.batter._VALUE", "string", "`batters.batter._VALUE`", "string"), ("batters.batter._id", "int", "`batters.batter._id`", "int"), ("name", "string", "name", "string"), ("ppu", "double", "ppu", "double"), ("topping", "array", "topping", "string"), ("fillings.filling", "array", "`fillings.filling`", "string")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("_id", "int", "_id", "int"), ("_type", "string", "_type", "string"), ("batters.batter._VALUE", "string", "`batters.batter._VALUE`", "string"), ("batters.batter._id", "int", "`batters.batter._id`", "int"), ("name", "string", "name", "string"), ("ppu", "double", "ppu", "double"), ("topping", "array", "topping", "string"), ("fillings.filling", "array", "`fillings.filling`", "string")], transformation_ctx = "applymapping1")

## Coalesce (1) to create a single CSV
s0 = DynamicFrame.fromDF(applymapping1.toDF().coalesce(1), glueContext, "s0")
## Change the frame in the write statement to s0 as below


## @type: DataSink
## @args: [connection_type = "s3", connection_options = {"path": "s3://raw-bucket-pipeline-test"}, format = "csv", transformation_ctx = "datasink2"]
## @return: datasink2
## @inputs: [frame = applymapping1]
datasink2 = glueContext.write_dynamic_frame.from_options(frame = s0, connection_type = "s3", connection_options = {"path": "s3://raw-bucket-pipeline-test"}, format = "csv", transformation_ctx = "datasink2")
job.commit()
